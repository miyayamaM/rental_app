name: Laravel

on:
  push:
    branches:
      - master
      - feature/*
  pull_request:
    branches:
      - master

jobs:
  laravel-tests:

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping -h localhost" --health-interval 20s --health-timeout 10s --health-retries 10
        env:
          MYSQL_DATABASE: laravel
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: laravel
      DB_USERNAME: user
      DB_PASSWORD: password

    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.0'
    - uses: actions/checkout@v2
    - name: Copy .env
      run: cp .env.example .env
      working-directory: ./app
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-reqs
      working-directory: ./app
    - name: composer dump autoloaded
      run: composer dump-autoload
      working-directory: ./app
    - name: Generate key
      run: php artisan key:generate
      working-directory: ./app
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      working-directory: ./app
    - name: Create Database
      run: php artisan migrate
      working-directory: ./app
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      run: vendor/bin/phpunit
      working-directory: ./app
    - name: Execute PHPStan analysis
      run: ./vendor/bin/phpstan analyse --memory-limit=2G
      working-directory: ./app
    - name: Execute PHP_CodeSniffer
      run: ./vendor/bin/phpcs --standard=phpcs.xml ./
      working-directory: ./app

  aws-deploy:
    runs-on: ubuntu-latest
    needs: laravel-tests
    permissions:
      id-token: write
      contents: read
    env:
      AWS_ROLE_ARN: arn:aws:iam::280107060642:role/role-for-github-actions
      ECR_REGISTRY: 280107060642.dkr.ecr.us-west-1.amazonaws.com
      ECR_REPOSITORY: rental-app-feature
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: us-west-1
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}
      - name: Build and Push image to ECR
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
      - name: Render Amazon ECS task definition
        id: render-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/task-definition.json
          container-name: apache-laravel
          image: 280107060642.dkr.ecr.us-west-1.amazonaws.com/rental-app-feature:latest
      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container.outputs.task-definition }}
          service: rental-app-service
          cluster: rental-app-cluster-def1
          force-new-deployment: true